rm(list=ls(all=TRUE))
library(sqldf)
install.packages("sqldf")
rm(list=ls(all=TRUE))
setwd('C:\\Users\\Gopal Mukkamala\\Desktop\\Credit Risk')
library(car)
library(randomForest)
library(caTools)
library(corrplot)
library(caret)
library(plyr)
library(ROCR)
library(e1071)
library(ada)
data_numerical <- read.csv("German_All_Numerical.csv", header = T)
data_numerical$V21 <- as.character(data_numerical$V21)
data_numerical$V21 <- revalue(data_numerical$V21, c("2"="0"))
data_numerical$V21 = as.numeric(data_numerical$V21)
data_numerical$X = NULL
colSums(is.na(data_numerical))
PCA_Data = subset(data_numerical, select = -V21)
str(PCA_Data)
sample_train_PCA<- sample(seq_len(nrow(PCA_Data)), size = floor(0.75*nrow(PCA_Data)))
sample_test_PCA <- sample(seq_len(nrow(PCA_Data)), size = floor(0.25*nrow(PCA_Data)))
PCA_train     <- PCA_Data[sample_train_PCA, ]
PCA_test      <- PCA_Data[sample_test_PCA, ]
PCA_result <- prcomp(PCA_train, scale. = T)
names(PCA_result)
PCA_result$center
PCA_result$scale
PCA_result$rotation
biplot(PCA_result,scale = 0)
std_dev = PCA_result$sdev
PCA_var = std_dev^2
prop_var <- PCA_var/sum(PCA_var)
biplot(PCA_result,scale = 0,lwd = 2)
biplot(PCA_result,scale = 0)
std_dev = PCA_result$sdev
PCA_var = std_dev^2
prop_var <- PCA_var/sum(PCA_var)
prop_var[1:20]
plot(prop_var, xlab = "Principal Component",
ylab = "Proportion of Variance Explained",
type = "b")
plot(cumsum(prop_var), xlab = "Principal Component",
ylab = "Cumulative Proportion of Variance Explained",
type = "b")
df_cor_numerical <- cor(data_numerical[1:(ncol(data_numerical)-1)], use = "complete.obs")
corrplot(df_cor_numerical, type="lower")
ReduceCorrelated <- findCorrelation(df_cor_numerical, cutoff=0.8, verbose = T)
sample_train <- sample(seq_len(nrow(data_numerical)), size = floor(0.75*nrow(data_numerical)))
sample_test <- sample(seq_len(nrow(data_numerical)), size = floor(0.25*nrow(data_numerical)))
train     <- data_numerical[sample_train, ]
test      <- data_numerical[sample_test, ]
str(train)
str(test)
modelFitGLM <- train(V21 ~ ., data = train, method = "glm")
train$V21 = as.factor(train$V21)
test$V21 = as.factor(test$V21)
modelFitGLM <- train(V21 ~ ., data = train, method = "glm")
modelFitADA <- ada(V21 ~., data = train , iter = 20, loss="logistic")
modelFitSVM <- train(V21 ~ ., data = train, method = "svmLinear")
modelFitRF <- train(V21 ~ ., data = train, method = "rf",ntree = 5)
testPredGLM <- predict(modelFitGLM, newdata = test)
testPredADA <- predict(modelFitADA, newdata = test)
testPredSVM <- predict(modelFitSVM, newdata = test)
testPredRF <- predict(modelFitRF, newdata = test)
confusionMatrix(testPredGLM, test$V21)$overall[1]
confusionMatrix(testPredADA, test$V21)$overall[1]
confusionMatrix(testPredSVM, test$V21)$overall[1]
confusionMatrix(testPredRF, test$V21)$overall[1]
AccGLM = confusionMatrix(testPredGLM, test$V21)$overall[1]
AccADA = confusionMatrix(testPredADA, test$V21)$overall[1]
AccSVM = confusionMatrix(testPredSVM, test$V21)$overall[1]
AccRF = confusionMatrix(testPredRF, test$V21)$overall[1]
AccNNET = confusionMatrix(testPredNNET, test$V21)$overall[1]
pred = prediction(as.numeric(testPredGLM),as.numeric(test$V21))
perfGLM = performance(pred,"tpr","fpr")
plot(perfGLM,type = "b",colorize = T,lwd = 3)
pred = prediction(as.numeric(testPredADA),as.numeric(test$V21))
perfADA = performance(pred,"tpr","fpr")
plot(perfADA,type = "b",colorize = T, add = T,lwd = 3)
pred = prediction(as.numeric(testPredSVM),as.numeric(test$V21))
perfSVM = performance(pred,"tpr","fpr")
plot(perfSVM,colorize = T, add = T,lwd = 3)
pred = prediction(as.numeric(testPredRF),as.numeric(test$V21))
perfRF = performance(pred,"tpr","fpr")
plot(perfRF,colorize = T, add = T,lwd = 3)
fitControl <- trainControl(method = "repeatedcv",
number = 10,
repeats = 5,
classProbs = TRUE,
summaryFunction = twoClassSummary)
train$V21 = ifelse(train$V21 == 0, "bad","good")
test$V21 = ifelse(test$V21 == 0, "bad","good")
modelFitRF <- train(V21 ~ ., data = train, method = "rf",ntree = 5)
modelFitNNET <- train(V21 ~ ., data = train, method = "nnet", metric = "ROC", trControl = fitControl,verbose = FALSE)
testPredNNET <- predict(modelFitNNET, newdata = test)
AccNNET = confusionMatrix(testPredNNET, test$V21)$overall[1]
train$V21 = as.factor(train$V21)
test$V21 = as.factor(test$V21)
AccNNET = confusionMatrix(testPredNNET, test$V21)$overall[1]
pred = prediction(as.numeric(testPredNNET),as.numeric(test$V21))
perfNN = performance(pred,"tpr","fpr",lwd = 3,add = T)
plot(perfNN,colorize = T,add = T)
plot(perfNN,colorize = T,add = T, lwd = 3)
save.image("C:/Users/Gopal Mukkamala/Desktop/Credit Risk/Results_Without_Normalization.RData")
rm(list=ls(all=TRUE))
setwd('C:\\Users\\Gopal Mukkamala\\Desktop\\Credit Risk')
library(car)
library(randomForest)
library(caTools)
library(corrplot)
library(caret)
library(plyr)
library(ROCR)
library(e1071)
library(ada)
data_numerical <- read.csv("German_All_Numerical.csv", header = T)
data_numerical$V21 <- as.character(data_numerical$V21)
data_numerical$V21 <- revalue(data_numerical$V21, c("2"="0"))
data_numerical$V21 = as.numeric(data_numerical$V21)
data_numerical$X = NULL
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
data_normalized <- as.data.frame(lapply(data_numerical, normalize))
data_numerical <- data_normalized
colSums(is.na(data_numerical))
PCA_Data = subset(data_numerical, select = -V21)
str(PCA_Data)
sample_train_PCA<- sample(seq_len(nrow(PCA_Data)), size = floor(0.75*nrow(PCA_Data)))
sample_test_PCA <- sample(seq_len(nrow(PCA_Data)), size = floor(0.25*nrow(PCA_Data)))
PCA_train     <- PCA_Data[sample_train_PCA, ]
PCA_test      <- PCA_Data[sample_test_PCA, ]
names(PCA_result)
PCA_result$center
PCA_result <- prcomp(PCA_train, scale. = T)
PCA_result$scale
PCA_result$rotation
std_dev = PCA_result$sdev
PCA_var = std_dev^2
biplot(PCA_result,scale = 0)
prop_var <- PCA_var/sum(PCA_var)
prop_var[1:20]
plot(prop_var, xlab = "Principal Component",
ylab = "Proportion of Variance Explained",
type = "b")
plot(cumsum(prop_var), xlab = "Principal Component",
ylab = "Cumulative Proportion of Variance Explained",
type = "b")
df_cor_numerical <- cor(data_numerical[1:(ncol(data_numerical)-1)], use = "complete.obs")
corrplot(df_cor_numerical, type="lower")
ReduceCorrelated <- findCorrelation(df_cor_numerical, cutoff=0.8, verbose = T)
sample_train <- sample(seq_len(nrow(data_numerical)), size = floor(0.75*nrow(data_numerical)))
sample_test <- sample(seq_len(nrow(data_numerical)), size = floor(0.25*nrow(data_numerical)))
train     <- data_numerical[sample_train, ]
test      <- data_numerical[sample_test, ]
str(train)
str(test)
train$V21 = as.factor(train$V21)
test$V21 = as.factor(test$V21)
fitControl <- trainControl(method = "repeatedcv",
number = 10,
repeats = 5,
classProbs = TRUE,
summaryFunction = twoClassSummary)
modelFitGLM <- train(V21 ~ ., data = train, method = "glm")
modelFitADA <- ada(V21 ~., data = train , iter = 20, loss="logistic")
modelFitSVM <- train(V21 ~ ., data = train, method = "svmLinear")
modelFitRF <- train(V21 ~ ., data = train, method = "rf",ntree = 5)
testPredGLM <- predict(modelFitGLM, newdata = test)
testPredADA <- predict(modelFitADA, newdata = test)
testPredSVM <- predict(modelFitSVM, newdata = test)
testPredRF <- predict(modelFitRF, newdata = test)
AccGLM = confusionMatrix(testPredGLM, test$V21)$overall[1]
AccADA = confusionMatrix(testPredADA, test$V21)$overall[1]
AccSVM = confusionMatrix(testPredSVM, test$V21)$overall[1]
AccRF = confusionMatrix(testPredRF, test$V21)$overall[1]
pred = prediction(as.numeric(testPredGLM),as.numeric(test$V21))
perfGLM = performance(pred,"tpr","fpr")
plot(perfGLM,type = "b",colorize = T,lwd = 3)
pred = prediction(as.numeric(testPredADA),as.numeric(test$V21))
perfADA = performance(pred,"tpr","fpr")
plot(perfADA,type = "b",colorize = T, add = T,lwd = 3)
pred = prediction(as.numeric(testPredSVM),as.numeric(test$V21))
perfSVM = performance(pred,"tpr","fpr")
plot(perfSVM,colorize = T, add = T,lwd = 3)
pred = prediction(as.numeric(testPredRF),as.numeric(test$V21))
perfRF = performance(pred,"tpr","fpr")
plot(perfRF,colorize = T, add = T,lwd = 3)
pred = prediction(as.numeric(testPredNNET),as.numeric(test$V21))
train$V21 = ifelse(train$V21 == 0, "bad","good")
test$V21 = ifelse(test$V21 == 0, "bad","good")
modelFitNNET <- train(V21 ~ ., data = train, method = "nnet", metric = "ROC", trControl = fitControl,verbose = FALSE)
testPredNNET <- predict(modelFitNNET, newdata = test)
AccNNET = confusionMatrix(testPredNNET, test$V21)$overall[1]
train$V21 = as.factor(train$V21)
test$V21 = as.factor(test$V21)
testPredNNET <- predict(modelFitNNET, newdata = test)
AccNNET = confusionMatrix(testPredNNET, test$V21)$overall[1]
pred = prediction(as.numeric(testPredNNET),as.numeric(test$V21))
perfNN = performance(pred,"tpr","fpr",lwd = 3,add = T)
plot(perfNN,colorize = T,add = T, lwd = 3)
pred = prediction(as.numeric(testPredGLM),as.numeric(test$V21))
perfGLM = performance(pred,"tpr","fpr")
plot(perfGLM,type = "b",colorize = T,lwd = 3,add = T)
pred = prediction(as.numeric(testPredADA),as.numeric(test$V21))
perfADA = performance(pred,"tpr","fpr")
plot(perfADA,type = "b",colorize = T, add = T,lwd = 3)
pred = prediction(as.numeric(testPredSVM),as.numeric(test$V21))
perfSVM = performance(pred,"tpr","fpr")
plot(perfSVM,colorize = T, add = T,lwd = 3)
pred = prediction(as.numeric(testPredRF),as.numeric(test$V21))
perfRF = performance(pred,"tpr","fpr")
plot(perfRF,colorize = T, add = T,lwd = 3)
pred = prediction(as.numeric(testPredNNET),as.numeric(test$V21))
perfNN = performance(pred,"tpr","fpr",lwd = 3,add = T)
plot(perfNN,colorize = T,add = T, lwd = 3)
histogram(AccGLM,AccSVM,AccNNET,AccADA,AccRF)
barplot(AccGLM,AccSVM,AccNNET,AccADA,AccRF)
Accu = c(AccGLM,AccSVM,AccNNET,AccADA,AccRF)
barplot(Accu)
barplot(Accu,col=c("darkblue","red"),xlab="GLM  SVM  NNET  ADA  RF")
barplot(Accu,col=c("darkblue","red"),xlab="GLM\t  SVM \t NNET \t ADA \t RF")
barplot(Accu,col=c("darkblue","red"),xlab="GLM\t  SVM \t NNET \t ADA     RF")
library(ggplot2)
ggplot(data.frame(Accu),aes(seq_along(Accu),Accu))+geom_bar(stat="identity")
ggplot(data.frame(Accu),aes(seq_along(Accu),Accu))+geom_bar(stat="identity",colour = c('darkblue','red'))
ggplot(data.frame(Accu),aes(seq_along(Accu),Accu))+geom_bar(stat="identity",colour = c("darkblue","red"))
ggplot(data.frame(Accu),aes(seq_along(Accu),Accu))+geom_bar(stat="identity",colour = 5)
ggplot(data.frame(Accu),aes(seq_along(Accu),Accu))+geom_bar(stat="identity",colour = c("darkblue","red","blue","darkble","red"))
ggplot(data.frame(Accu),aes(seq_along(Accu),Accu))+geom_bar(stat="identity",colour = c("darkblue","red","blue","darkblue","red"))
barplot(Accu,col=c("darkblue","red"),xlab="GLM  SVM   NNET  ADA     RF")
ggplot(data.frame(Accu),aes(seq_along(Accu),Accu))+geom_bar(stat="identity",colour = c("darkblue","red","blue","darkblue","red"),beside=TRUE, space=c(0, 2))
barplot(Accu,col=c("darkblue","red"), beside=TRUE, space=c(0, 2))
barplot(Accu,col=c("darkblue","red"), beside=TRUE, space=c(2, 0))
barplot(Accu,col=c("darkblue","red"), beside=TRUE, space=c(1, 0))
barplot(Accu,col=c("darkblue","red"), beside=TRUE, space=c(1, 1))
barplot(Accu,col=c("darkblue","red"), beside=TRUE, space=c(1, 1))
barplot(Accu,col=c("darkblue","red"), beside=TRUE, space=c(1, 2))
barplot(Accu,col=c("darkblue","red"), beside=TRUE, space=c(1, 5))
barplot(Accu,col=c("darkblue","red"), beside=TRUE, space=c(1, 0))
barplot(Accu,col=c("darkblue","red"), beside=F, space=c(1, 0))
barplot(Accu,col=c("darkblue","red"), beside=T, space=c(1, 0))
barplot(Accu,col=c("darkblue","red"), beside=T, space=c(0,3))
barplot(Accu,col=c("darkblue","red"), beside=T, space=c(0,2))
barplot(Accu,col=c("darkblue","red"), beside=T, space=c(0,1))
barplot(Accu,col=c("darkblue","red"), beside=T, space=c(1,1))
xx = barplot(Accu,col=c("darkblue","red"), beside=T, space=c(1,1))
xx
text(x = xx, y = dat$freqs, label = dat$freqs, pos = 3, cex = 0.8, col = "red")
dat$freqs <- as.numeric(as.character(Accu))
text(x = xx, y = dat$freqs, label = dat$freqs, pos = 3, cex = 0.8, col = "red")
Accu = c(AccGLM,AccSVM,AccNNET,AccADA,AccRF)
b = barplot(Accu,col=c("darkblue","red"), beside=T, space=c(1,1))
text(Accu=b, y= table(Accu)+1, labels=as.character(table(Accu)))
b = barplot(Accu,col=c("darkblue","red"), beside=T, space=c(1,1))
text(Accu = b, y= table(Accu)+1, labels=as.character(table(Accu)))
save.image("C:/Users/Gopal Mukkamala/Desktop/Credit Risk/Results_With_Normalization.RData")
load("C:/Users/Gopal Mukkamala/Desktop/Credit Risk/Results_Without_Normalization.RData")
load("C:/Users/Gopal Mukkamala/Desktop/Credit Risk/Results_With_Normalization.RData")
View(data_numerical)
table(test$V21,testPredGLM)
table(test$V21,testPredSVM)
table(test$V21,testPredNNET)
table(test$V21,testPredADA)
table(test$V21,testPredRF)
precision <- sum(testPredGLM & test$V21) / sum(testPredGLM)
as.numeric(testPredGLM)
View(data_numerical)
rm(list=ls(all=TRUE))
setwd('C:\\Users\\Gopal Mukkamala\\Desktop\\Credit Risk')
library(car)
library(randomForest)
library(caTools)
library(corrplot)
library(caret)
library(plyr)
library(ROCR)
library(e1071)
library(ada)
library(ggplot2)
data_numerical <- read.csv("German_All_Numerical.csv", header = T)
data_numerical$V21 <- as.character(data_numerical$V21)
data_numerical$V21 <- revalue(data_numerical$V21, c("2"="0"))
data_numerical$V21 = as.numeric(data_numerical$V21)
data_numerical$X = NULL
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
library(pROC)
install.packages(pROC)
install.packages("pROC)
install.packages("pROC")
library(pROC)
data_numerical <- read.csv("German_All_Numerical.csv", header = T)
data_numerical$V21 <- as.character(data_numerical$V21)
data_numerical$V21 <- revalue(data_numerical$V21, c("2"="0"))
data_numerical$X = NULL
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
data_numerical$V21 = as.numeric(data_numerical$V21)
data_normalized <- as.data.frame(lapply(data_numerical, normalize))
data_numerical <- data_normalized
colSums(is.na(data_numerical))
PCA_Data = subset(data_numerical, select = -V21)
str(PCA_Data)
sample_train_PCA<- sample(seq_len(nrow(PCA_Data)), size = floor(0.75*nrow(PCA_Data)))
sample_test_PCA <- sample(seq_len(nrow(PCA_Data)), size = floor(0.25*nrow(PCA_Data)))
PCA_train     <- PCA_Data[sample_train_PCA, ]
PCA_test      <- PCA_Data[sample_test_PCA, ]
PCA_result <- prcomp(PCA_train, scale. = T)
names(PCA_result)
PCA_result$center
PCA_result$scale
PCA_result$rotation
biplot(PCA_result,scale = 0)
std_dev = PCA_result$sdev
PCA_var = std_dev^2
prop_var <- PCA_var/sum(PCA_var)
prop_var[1:20]
plot(prop_var, xlab = "Principal Component",
ylab = "Proportion of Variance Explained",
type = "b")
plot(cumsum(prop_var), xlab = "Principal Component",
ylab = "Cumulative Proportion of Variance Explained",
type = "b")
df_cor_numerical <- cor(data_numerical[1:(ncol(data_numerical)-1)], use = "complete.obs")
corrplot(df_cor_numerical, type="lower")
ReduceCorrelated <- findCorrelation(df_cor_numerical, cutoff=0.8, verbose = T)
sample_train <- sample(seq_len(nrow(data_numerical)), size = floor(0.75*nrow(data_numerical)))
sample_test <- sample(seq_len(nrow(data_numerical)), size = floor(0.25*nrow(data_numerical)))
train     <- data_numerical[sample_train, ]
test      <- data_numerical[sample_test, ]
str(train)
str(test)
train$V21 = as.factor(train$V21)
test$V21 = as.factor(test$V21)
fitControl <- trainControl(method = "repeatedcv",
number = 10,
repeats = 5,
classProbs = TRUE,
summaryFunction = twoClassSummary)
modelFitGLM <- train(V21 ~ ., data = train, method = "glm")
modelFitADA <- ada(V21 ~., data = train , iter = 20, loss="logistic")
modelFitSVM <- train(V21 ~ ., data = train, method = "svmLinear")
modelFitRF <- train(V21 ~ ., data = train, method = "rf",ntree = 5)
testPredGLM <- predict(modelFitGLM, newdata = test)
testPredADA <- predict(modelFitADA, newdata = test)
testPredSVM <- predict(modelFitSVM, newdata = test)
testPredRF <- predict(modelFitRF, newdata = test)
testPredNNET <- predict(modelFitNNET, newdata = test)
max(testPredADA)
View(test)
testPredGLM <- predict(modelFitGLM, newdata = test)
testPredADA <- predict(modelFitADA, newdata = test)
testPredSVM <- predict(modelFitSVM, newdata = test)
testPredRF <- predict(modelFitRF, newdata = test)
AccGLM = confusionMatrix(testPredGLM, test$V21)$overall[1]
AccADA = confusionMatrix(testPredADA, test$V21)$overall[1]
AccSVM = confusionMatrix(testPredSVM, test$V21)$overall[1]
AccRF = confusionMatrix(testPredRF, test$V21)$overall[1]
auc(test$V21,testPredGLM)
auc(test$V21,as.numeric(testPredGLM))
AccGLM = confusionMatrix(testPredGLM, test$V21)
AccGLM
max(testPredGLM)
max(as.numeric(testPredGLM)
AccADA = confusionMatrix(testPredADA, test$V21)
AccADA = confusionMatrix(testPredADA, test$V21)
confusionMatrix(testPredGLM, test$V21)
confusionMatrix(testPredADA, test$V21)
confusionMatrix(testPredSVM, test$V21)
confusionMatrix(testPredRF, test$V21)
confusionMatrix(testPredNNET, test$V21)
pred = prediction(as.numeric(testPredGLM),as.numeric(test$V21))
perfGLM = performance(pred,"tpr","fpr")
plot(perfGLM,type = "b",colorize = T,lwd = 3,add = T)
pred = prediction(as.numeric(testPredGLM),as.numeric(test$V21))
perfGLM = performance(pred,"tpr","fpr")
plot(perfGLM,type = "b",colorize = T,lwd = 3,add = T)
pred = prediction(as.numeric(testPredGLM),as.numeric(test$V21))
perfGLM = performance(pred,"tpr","fpr")
plot(perfGLM,type = "b",colorize = T,lwd = 3,add = T)
pred = prediction(as.numeric(testPredGLM),as.numeric(test$V21))
perfGLM = performance(pred,"tpr","fpr")
plot(perfGLM,type = "b",colorize = T,lwd = 3,add = T)
pred = prediction(as.numeric(testPredGLM),as.numeric(test$V21))
perfGLM = performance(pred,"tpr","fpr")
plot(perfGLM,type = "b",colorize = T,lwd = 3,add = T)
pred = prediction(as.numeric(testPredGLM),as.numeric(test$V21))
perfGLM = performance(pred,"tpr","fpr")
plot(perfGLM,type = "b",colorize = T,lwd = 3,add = T)
pred = prediction(as.numeric(testPredADA),as.numeric(test$V21))
perfADA = performance(pred,"tpr","fpr")
plot(perfADA,type = "b",colorize = T, add = T,lwd = 3)
pred = prediction(as.numeric(testPredGLM),as.numeric(test$V21))
perfGLM = performance(pred,"tpr","fpr")
plot(perfGLM,type = "b",colorize = T,lwd = 3)
pred = prediction(as.numeric(testPredADA),as.numeric(test$V21))
perfADA = performance(pred,"tpr","fpr")
plot(perfADA,type = "b",colorize = T, add = T,lwd = 3)
pred = prediction(as.numeric(testPredSVM),as.numeric(test$V21))
perfSVM = performance(pred,"tpr","fpr")
plot(perfSVM,colorize = T, add = T,lwd = 3)
pred = prediction(as.numeric(testPredRF),as.numeric(test$V21))
perfRF = performance(pred,"tpr","fpr")
plot(perfRF,colorize = T, add = T,lwd = 3)
auc(test$V21,testPredGLM)
auc(test$V21,as.numeric(testPredGLM))
auc(test$V21,as.numeric(testPredSVM))
auc(test$V21,as.numeric(testPredADA))
auc(test$V21,as.numeric(testPredRF))
precision <- sum(testPredGLM & test$V21) / sum(testPredGLM)
precision <- sum(as.numeric(testPredGLM) & as.numeric(test$V21) / sum(as.numeric(testPredGLM))
recall <- sum(predict & actual_labels) / sum(actual_labels)
precision <- sum(as.numeric(testPredGLM) & as.numeric(test$V21)) / sum(as.numeric(testPredGLM))
precision
recall <- sum(testPredGLM & test$V21) / sum(test$V21)
recall <- sum(as.numeric(testPredGLM) & as.numeric(test$V21)) / sum(as.numeric(test$V21)
recall <- sum(as.numeric(testPredGLM) & as.numeric(test$V21)) / sum(as.numeric(test$V21)
recall <- sum(as.numeric(testPredGLM) & as.numeric(test$V21)) / sum(as.numeric(test$V21))
recall
precisionGLM <- sum(as.numeric(testPredGLM) & as.numeric(test$V21)) / sum(as.numeric(testPredGLM))
precisionADA <- sum(as.numeric(testPredADA) & as.numeric(test$V21)) / sum(as.numeric(testPredADA))
precisionSVM <- sum(as.numeric(testPredSVM) & as.numeric(test$V21)) / sum(as.numeric(testPredSVM))
precisionRF <- sum(as.numeric(testPredRF) & as.numeric(test$V21)) / sum(as.numeric(testPredRF))
prescisionNNET <- sum(as.numeric(testPredNNET) & as.numeric(test$V21)) / sum(as.numeric(testPredNNET))
trainNNET <- train
testNNET <- test
modelFitNNET <- train(V21 ~ ., data = trainNNET, method = "nnet", metric = "ROC", trControl = fitControl,verbose = FALSE)
train2$V21 = ifelse(train$V21 == 0, "bad","good")
test2$V21 = ifelse(test$V21 == 0, "bad","good")
trainNNET$V21 = ifelse(trainNNET$V21 == 0, "bad","good")
testNNET$V21 = ifelse(testNNET$V21 == 0, "bad","good")
modelFitNNET <- train(V21 ~ ., data = trainNNET, method = "nnet", metric = "ROC", trControl = fitControl,verbose = FALSE)
testPredNNET <- predict(modelFitNNET, newdata = testNNET)
confusionMatrix(testPredNNET, testNNET$V21)
trainNNET$V21 = as.factor(trainNNET$V21)
testNNET$V21 = as.factor(testNNET$V21)
confusionMatrix(testPredNNET, testNNET$V21)
pred = prediction(as.numeric(testPredNNET),as.numeric(testNNET$V21))
perfNN = performance(pred,"tpr","fpr",lwd = 3,add = T)
plot(perfNN,colorize = T,add = T, lwd = 3)
prescisionNNET <- sum(as.numeric(testPredNNET) & as.numeric(testNNET$V21)) / sum(as.numeric(testPredNNET))
rm(precision)
recallGLM <- sum(as.numeric(testPredGLM) & as.numeric(test$V21)) / sum(as.numeric(test$V21))
recallADA <- sum(as.numeric(testPredADA) & as.numeric(test$V21)) / sum(as.numeric(test$V21))
recallSVM <- sum(as.numeric(testPredSVM) & as.numeric(test$V21)) / sum(as.numeric(test$V21))
recallRF <- sum(as.numeric(testPredRF) & as.numeric(test$V21)) / sum(as.numeric(test$V21))
recallNNET <- sum(as.numeric(testPredNNET) & as.numeric(testNNET$V21)) / sum(as.numeric(test$V21))
recallGLM <- sum(as.numeric(testPredGLM) , as.numeric(test$V21)) / sum(as.numeric(test$V21))
recallADA <- sum(as.numeric(testPredADA) , as.numeric(test$V21)) / sum(as.numeric(test$V21))
recallSVM <- sum(as.numeric(testPredSVM) , as.numeric(test$V21)) / sum(as.numeric(test$V21))
recallRF <- sum(as.numeric(testPredRF) , as.numeric(test$V21)) / sum(as.numeric(test$V21))
recallNNET <- sum(as.numeric(testPredNNET) , as.numeric(testNNET$V21)) / sum(as.numeric(test$V21))
recallGLM <- sum(as.numeric(testPredGLM) & as.numeric(test$V21)) / sum(as.numeric(test$V21))
recallADA <- sum(as.numeric(testPredADA) & as.numeric(test$V21)) / sum(as.numeric(test$V21))
recallSVM <- sum(as.numeric(testPredSVM) & as.numeric(test$V21)) / sum(as.numeric(test$V21))
recallRF <- sum(as.numeric(testPredRF) & as.numeric(test$V21)) / sum(as.numeric(test$V21))
recallNNET <- sum(as.numeric(testPredNNET) & as.numeric(testNNET$V21)) / sum(as.numeric(test$V21))
confusionMatrix(testPredGLM, test$V21)
150/150+40
150/190
confusionMatrix(testPredADA, test$V21)
162+30
162/192
confusionMatrix(testPredSVM, test$V21)
151+40
151/191
confusionMatrix(testPredRF, test$V21)
165+17
165/182
confusionMatrix(testPredNNET, testNNET$V21)
151+33
151/184
confusionMatrix(testPredGLM, test$V21)
150+38
150/188
for ( i in seq(1,length( data_numerical ),1) ) plot(data_numerical[,i],ylab=names(data_numerical[i]),type="l")
for ( i in seq(1,length( data_normalized ),1) ) plot(data_normalized[,i],ylab=names(data_normalized[i]),type="l")
for ( i in seq(1,length( data_normalized ),1) ) plot(data_normalized[,i],ylab=names(data_normalized[i]),type="b")
for ( i in seq(1,length( data_normalized ),1) ) plot(data_normalized[,i],ylab=names(data_normalized[i]),type="b")
for ( i in seq(1,length( data_normalized ),1) ) plot(data_normalized[,i],ylab=names(data_normalized[i]),type="l")
ggplot(df, aes(time,value)) + geom_line(aes(colour = series))
ggplot(data_normalized, aes(time,value)) + geom_line(aes(colour = series))
ggplot(data_normalized, aes(time,value)) + geom_line(aes(colour = series))
data_normalized <- melt(data_normalized ,  id.vars = 'time', variable.name = 'series')
require(reshape2)
data_normalized <- melt(data_normalized ,  id.vars = 'time', variable.name = 'series')
ggplot(data_normalized, aes(time,value)) + geom_line(aes(colour = series))
data_normalized <- melt(data_normalized ,  id.vars = 'time', variable.name = 'series')
ggplot(data_normalized)
ggplot(data_normalized)
write.csv(cumsum(prop_var),"PCA_plot.csv")
plot(prop_var, xlab = "Principal Component",
ylab = "Proportion of Variance Explained",
type = "b")
plot(cumsum(prop_var), xlab = "Principal Component",
ylab = "Cumulative Proportion of Variance Explained",
type = "b")
